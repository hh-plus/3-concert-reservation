/**
 * @packageDocumentation
 * @module api.functional.cash.charge
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type { ChargeCashReqBodyDto } from '../../../../cash/dto/charge-cash.dto';
import type { GetCashResDto } from '../../../../cash/dto/getCash.dto';

/**
 * 캐시 충전하기
 *
 * @tag Cash
 * @description 대기열 토큰이 필요하지 않음.
 * @param userId
 * @param body 캐시, 1000단위여야 하고 1000원 이상
 * @throws 400 잘못 된 요청
 * @throws 404 유저를 찾을 수 없음
 *
 * @controller CashController.chargeCash
 * @path POST /cash/:userId/charge
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function chargeCash(
  connection: IConnection,
  userId: number,
  body: chargeCash.Input,
): Promise<chargeCash.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        'Content-Type': 'application/json',
      },
    },
    {
      ...chargeCash.METADATA,
      path: chargeCash.path(userId),
    },
    body,
  );
}
export namespace chargeCash {
  export type Input = Primitive<ChargeCashReqBodyDto>;
  export type Output = Primitive<GetCashResDto>;

  export const METADATA = {
    method: 'POST',
    path: '/cash/:userId/charge',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (userId: number) =>
    `/cash/${encodeURIComponent(userId ?? 'null')}/charge`;
}
