/**
 * @packageDocumentation
 * @module api.functional.concert.reserve
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';

import type {
  ReserveConcertReqDto,
  ReserveConcertResDto,
} from '../../../../src/concert/controllers/dto/reserve-concert.dto';

/**
 * 콘서트 좌석 예약하기
 *
 * @param concertId
 * @throws 400 잘못 된 요청
 * @throws 401 Bad Request
 * @returns
 *
 * @controller ConcertController.reserveConcert
 * @path POST /concert/:concertId/reserve
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function reserveConcert(
  connection: IConnection,
  concertId: number,
  body: reserveConcert.Input,
): Promise<reserveConcert.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        'Content-Type': 'application/json',
      },
    },
    {
      ...reserveConcert.METADATA,
      path: reserveConcert.path(concertId),
    },
    body,
  );
}
export namespace reserveConcert {
  export type Input = Primitive<ReserveConcertReqDto>;
  export type Output = Primitive<ReserveConcertResDto>;

  export const METADATA = {
    method: 'POST',
    path: '/concert/:concertId/reserve',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (concertId: number) =>
    `/concert/${encodeURIComponent(concertId ?? 'null')}/reserve`;
}
