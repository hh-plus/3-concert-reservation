name: Deploy to Amazon ECS

on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - dev
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: create env
        run: |

          echo "${{secrets.dev_ENV}}" >> .env

      - name: Delete ECR images
        run: |
          for repo in $(aws ecr describe-repositories --query 'repositories[].repositoryName' --output text); do
            for tag in $(aws ecr list-images --repository-name $repo --query 'imageIds[].imageTag' --output text); do
              aws ecr batch-delete-image --repository-name $repo --image-ids imageTag=$tag;
            done;
          done;

      - name: Build, tag, and push the image(node.js) to Amazon ECR
        id: build-image-node
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG_NODE: concert

        run: |
          ${{secrets.AWS_DOCKER_LOGIN_CONSOLE}}
          docker build -f dev.dockerfile -t ${{secrets.ECR_REGISTRY}}/concert:dev .
          docker push ${{secrets.ECR_REGISTRY}}/concert:dev

      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Render Amazon ECS task definition

        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: 'concert_3334'
          image: ${{secrets.ECR_REGISTRY}}/concert:dev
          environment-variables: 'LOG_LEVEL=info'

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: my-service
          cluster: my-cluster
